buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	}
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'maven-publish'


sourceCompatibility = 1.8
targetCompatibility = 1.8

version = "2.4.32"

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
    version = version + "." + "${System.getenv().BUILD_NUMBER}"
}

group= "vswe.stevescarts" // http://maven.apache.org/guides/mini/guide-naming-conventions.html

minecraft {
	version = project.forgeversion
	mappings = project.mcp_mappings
	replace "@MODVERSION@", project.version
	//  makeObfSourceJar = false
	useDepAts = true
	runDir = "run"
}

repositories {
	maven {
		name = "ic2"
		url = "http://maven.ic2.player.to/"
	}
	maven {
		name = "Modmuss50"
		url = "http://maven.modmuss50.me/"
	}
	maven {
		url = "https://www.cursemaven.com"
	}
}


dependencies {
	deobfCompile ('net.sengir.forestry:forestry_1.12.2:5.8.2.374'){
		transitive = false
	}
	compileOnly ('RebornCore:RebornCore-1.12.2:3.13.2.+:dev'){
		transitive = false
	}
	runtime ('RebornCore:RebornCore-1.12.2:3.13.2.+:universal'){
		transitive = false
	}
	deobfCompile ('TechReborn:TechReborn-1.12.2:2.20.5.+:universal'){
		transitive = false
	}
	deobfCompile ('TechReborn:TechReborn-ModCompatibility-1.12.2:1.1.0.15:universal') {
		transitive = false
	}
	compile "curse.maven:ic2-classic:2979877"
	//deobfCompile  'net.industrial-craft:industrialcraft-2:2.8.104-ex112'
}

processResources{
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version': project.version, 'mcversion': project.minecraft.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    exclude "**/*.psd"
    classifier = 'dev'
}

task apiJar(type: Jar) {
	from sourceSets.main.allSource
	from sourceSets.main.output
	include 'vswe/stevescarts/api/**/*'

	classifier = "api"
}

apiJar.mustRunAfter deobfJar

build.dependsOn deobfJar, apiJar

import groovy.util.XmlSlurper
import org.apache.commons.io.FileUtils

task curseTools << {
	def cacheFiles = new File(".gradle/curseTools")
	if (!cacheFiles.exists()) {
		cacheFiles.mkdirs()
	}

	def mavenMetadata = new File(cacheFiles, "maven-metadata.xml")

	logger.lifecycle(":downloading curseTools metadata")
	FileUtils.copyURLToFile(new URL("http://maven.modmuss50.me/CurseTools/CurseTools/maven-metadata.xml"), mavenMetadata)

	def metadata = new XmlSlurper().parseText(FileUtils.readFileToString(mavenMetadata))
	def curseToolsVersion = metadata.versioning.release

	def curseTools = new File(cacheFiles, "${curseToolsVersion}.jar")

	logger.lifecycle(":downloading CurseTools")
	FileUtils.copyURLToFile(new URL("http://maven.modmuss50.me/CurseTools/CurseTools/${curseToolsVersion}/CurseTools-${curseToolsVersion}.jar"), curseTools)

	logger.lifecycle(":launching CurseTools")
	ant.java(jar: curseTools.getAbsolutePath(), fork: true, spawn: false) {
		arg(value: jar.archivePath.getAbsolutePath())
		arg(value: deobfJar.archivePath.getAbsolutePath())
		arg(value: apiJar.archivePath.getAbsolutePath())
	}
}

task signJar(type: SignJar, dependsOn: reobfJar) {
	onlyIf {
		project.hasProperty('keyStore')
	}

	if (project.hasProperty('keyStore')) {
		keyStore = project.keyStore
		alias = project.keyStoreAlias
		storePass = project.keyStorePass
		keyPass = project.keyStoreKeyPass
		inputFile = jar.archivePath
		outputFile = jar.archivePath
	}

}

build.dependsOn signJar

publishing {
	publications {
		maven(MavenPublication) {
			groupId project.group
			artifactId project.archivesBaseName
			version project.version

			from components.java

			artifact apiJar {
				classifier "api"
			}

			artifact deobfJar {
				classifier "dev"
			}

			//Removes all of the dependencies from the maven pom, fixes issues when other projects try to depend on tr
			pom.withXml {
				asNode().remove(asNode().get('dependencies'))
			}
		}
	}
	repositories {
		maven {
			url "http://mavenupload.modmuss50.me/"
			if (project.hasProperty('mavenPass')) {
				credentials {
					username 'buildslave'
					password project.getProperty('mavenPass')
				}
			}
		}
	}
}
